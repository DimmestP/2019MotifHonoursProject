refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
right_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- refMotifsRates
for(i in 1:2){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
right_join(refMotifsRatesGrouped, c("orf", "ATATTC", "TGCAT", "TGTAAATA", "TTTTTTA", "dr", "hlife"))
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- refMotifsRates
for(i in 1:2){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
inner_join(refMotifsRatesGrouped, c("orf", "ATATTC", "TGCAT", "TGTAAATA", "TTTTTTA", "dr", "hlife"))
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
refMotifsRatesGrouped <- tibble(orf = NULL)
refMotifsRatesGrouped <- tibble(orf = 1)
for(i in 1:2){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
refMotifsRatesGrouped <- tibble(orf = "1")
for(i in 1:2){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
View(refMotifsRatesGrouped)
for(i in 1:9){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- tibble(orf = "1")
for(i in 1:9){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
for(i in 1:10){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- tibble(orf = "1")
for(i in 1:10){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped)
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(function(refMotifsRates){ return lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates)})
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(function(refMotifsRates){ lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates)})
?summarise
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){ lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates)})
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){ refMotifsRates })
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){ mean(refMotifsRates) })
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){
return mean(refMotifsRates) })
x <- mean(refMotifsRates)
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){
x <- mean(refMotifsRates)
return x  })
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = function(refMotifsRates){
mean(refMotifsRates) })
mean(refMotifsRates) }
x <- function(refMotifsRates){mean(refMotifsRates) }
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = x())
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = x(.))
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = x(dr))
x <- function(refMotifsRates){lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates)}
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = x(.))
x <- function(refMotifsRates){summary(lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates))}
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
summarise(output = x(.))
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
transmute(output = x(.))
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
do(output = x(.))
?do
x <- function(refMotifsRates){ lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates) }
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
do(output = x(.))
x <- function(refMotifsRates){ refMotifsRates }
# complete linear regression by random groups
refMotifsRatesGrouped %>%
group_by(Group) %>%
do(output = x(.))
View(drRaw)
View(randomisedGroup)
View(drData)
# complete linear regression by random groups
x <-refMotifsRatesGrouped %>%
filter(is.finite(Group)) %>%
group_by(Group) %>%
do(output = x(.))
x <- function(refMotifsRates){ refMotifsRates }
# complete linear regression by random groups
refMotifsRatesGrouped %>%
filter(is.finite(Group)) %>%
group_by(Group) %>%
do(output = x(.))
x <- function(refMotifsRates){ lm(log2(hlife) ~ TGCAT + TGTAAATA + ATATTC + TTTTTTA, refMotifsRates) }
# complete linear regression by random groups
refMotifsRatesGrouped %>%
filter(is.finite(Group)) %>%
group_by(Group) %>%
do(output = x(.))
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- tibble(orf = "1")
for(i in 1:10){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(Group = i) %>%
full_join(refMotifsRatesGrouped) %>%
filter(is.finite(Group))
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# complete linear regression by random groups
allGroups <- tibble(Group = c(1:10))
View(allGroups)
# Split the refMotifsRates tibble into 10 randomly sampled groups
tempRefMotifsRates <- refMotifsRates
refMotifsRatesGrouped <- tibble(orf = "1")
for(i in 1:10){
randomisedGroup <- sample_n(tempRefMotifsRates,356)
refMotifsRatesGrouped <- randomisedGroup %>%
mutate(group = i) %>%
full_join(refMotifsRatesGrouped) %>%
filter(is.finite(group))
tempRefMotifsRates <- tempRefMotifsRates %>%
filter(!(orf %in% randomisedGroup$orf))
}
# complete linear regression by random groups
allGroups <- tibble(group = c(1:10))
for(i in 10){
currentGroup <- allGroups %>%
filter(group != i)
refMotifsRatesGrouped %>%
filter(group %in% currentGroup$group) %>%
do(output = x(.))
}
for(i in 1:10){
currentGroup <- allGroups %>%
filter(group != i)
refMotifsRatesGrouped %>%
filter(group %in% currentGroup$group) %>%
do(output = x(.))
}
?sample
library(tidyverse)
library(ggplot2)
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("data/Sun_mutation_UTRs.rds")
sc_raw <-read_tsv("data/YPD_scRNA.tab")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
sc_raw <-read_tsv("../data/YPD_scRNA.tab")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
#new dataframe with ORF names, and frequency counts of some motifs
ref_motifs <- tibble(orf = UTR_raw$genename, ATATTC = str_count(UTR_3, "ATATTC"), TGCAT = str_count(UTR_3, "TGCAT"), TGTAAATA = str_count(UTR_3, "TGTAAATA"), TTTTTTA = str_count(UTR_3, "TTTTTTA"))
#new dataframe with ORF names, and frequency counts of some motifs
sc_long <- sc_raw %>%
arrange(geneName)%>%
gather(key = "cell", value = "transcripts", select = 3:129)%>%
group_by(geneName, comGeneName)%>%
#add coefficient of variation
mutate(CV = (sd(transcripts)/mean(transcripts)))%>%
ungroup()%>%
#clean up
select(-cell, -transcripts)%>%
distinct()%>%
filter(!is.na(CV))
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
sc_raw <-read_tsv("../data/YPD_scRNA.tab")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
sc_raw <-read_tsv("../data/YPD_scRNA.tab")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
View(sc_raw)
#new dataframe with ORF names, and frequency counts of some motifs
ref_motifs <- tibble(orf = UTR_raw$genename, ATATTC = str_count(UTR_3, "ATATTC"), TGCAT = str_count(UTR_3, "TGCAT"), TGTAAATA = str_count(UTR_3, "TGTAAATA"), TTTTTTA = str_count(UTR_3, "TTTTTTA"))
#new dataframe with ORF names, and frequency counts of some motifs
sc_long <- sc_raw %>%
arrange(geneName)%>%
gather(key = "cell", value = "transcripts", select = 3:129)%>%
group_by(geneName, comGeneName)%>%
#add coefficient of variation
mutate(CV = (sd(transcripts)/mean(transcripts)))%>%
ungroup()%>%
#clean up
select(-cell, -transcripts)%>%
distinct()%>%
filter(!is.na(CV))
sc_raw %>%
arrange(geneName)%>%
gather(key = "cell", value = "transcripts", select = 3:129)%>%
group_by(geneName, comGeneName) %>%
count()
sc_raw %>%
arrange(geneName)%>%
gather(key = "cell", value = "transcripts", select = 3:129)%>%
group_by(geneName) %>%
count()
sc_raw %>%
arrange(geneName)%>%
gather(key = "cell", value = "transcripts", select = 3:129)%>%
group_by(comGeneName) %>%
count()
#add coefficient of variation
ref_motifs_var <- ref_motifs %>%
mutate(CV = sc_long$CV[match(orf, sc_long$geneName)])
motifs = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
model_data <- ref_motifs_var %>%
#remove rows with NAs
filter(!is.na(CV))%>%
#convert motif frequencies to presence and then to factor
mutate_at(motifs, funs(replace(., .>= 1, 1)))%>%
mutate_at(motifs, funs(factor(.) ))
#to create a multiple linear model
all_lm <- lm(data = model_data, log(CV) ~ ATATTC + TGTAAATA + TGCAT + TTTTTTA)
summary(all_lm)
View(ref_motifs)
View(model_data)
View(ref_motifs_var)
View(ref_motifs)
View(sc_raw)
model_data_groups <- model_data
View(model_data)
#Create Randomly Sampled  Groups 1-10
model_data_groups$groupID <- sample(1:10, size = nrow(model_data_groups), replace = TRUE)
View(model_data_groups)
model_data_groups %>%
group_by(groupID) %>%
count()
model_data_groups <- model_data
#Create Randomly Sampled  Groups 1-10
model_data_groups$groupID <- sample(1:10, size = nrow(model_data_groups), replace = TRUE)
#initialize a blank list
list10 <- vector(mode = "list", length = 10)
#initialize a tibble for storing lms and coefficients
group_lms <- tibble(group_excl = 1:10, lm = list10, coeffs = list10)
##Create Cross Validated Linear Models
par(mfrow = c(2,5))
for(i in 1:10){
group_lms[[2]][[i]] <- model_data_groups %>%
#Exclude group i from data and create lm
filter(groupID != i)%>%
lm(log2_hlife ~ ATATTC + TGTAAATA + TGCAT + TTTTTTA, data = .)
#calculate and store coeffs of each lm in coeff column
group_lms[[3]][[i]] <- summary(group_lms[[2]][[i]])$coefficient
plot(group_lms$lm[[i]], which = 2, col= 2, main = paste("Excl. Group", i,  collapse = ""))
}
# ^: END OF FOR LOOP ^
#print all coeffs
group_lms$coeffs
library(tidyverse)
library(ggplot2)
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("data/Sun_mutation_UTRs.rds")
dr_raw <-read_tsv("data/sun_total_dr.txt", locale = locale(decimal = ","))
#sr_raw <- read_table("data/sun_total_sr.txt")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
#change weird name of third column of wt degradation rate
colnames(dr_raw)[3] <- "d_rate"
#new smaller dataframe with first three cols
dr_data <- dr_raw %>%
dplyr::select(orf, gene, d_rate)
#Error Handling for File not found
#Syntax tryCatch( {Exprns}, error = function(any){ print("out") } )
tryCatch({
UTR_raw <- read_rds("../data/Sun_mutation_UTRs.rds")
dr_raw <-read_tsv("../data/sun_total_dr.txt", locale = locale(decimal = ","))
#sr_raw <- read_table("data/sun_total_sr.txt")
},
error = function(x)
{
print(x) #print actual error
cat("\nCurrent directory:",
getwd())
}
)
UTR_3 <- UTR_raw$UTR3_seq
#change weird name of third column of wt degradation rate
colnames(dr_raw)[3] <- "d_rate"
#new smaller dataframe with first three cols
dr_data <- dr_raw %>%
dplyr::select(orf, gene, d_rate)
View(dr_raw)
#new dataframe with ORF names, and frequency counts of some motifs
ref_motifs <- tibble(orf = UTR_raw$genename, ATATTC = str_count(UTR_3, "ATATTC"), TGCAT = str_count(UTR_3, "TGCAT"), TGTAAATA = str_count(UTR_3, "TGTAAATA"), TTTTTTA = str_count(UTR_3, "TTTTTTA"))
#create a dataset with decayrate(dr) by matching orf name to dr dataframe
#half life is given by ln2/DecayRate
ref_motifs_rates <- ref_motifs %>%
mutate(dr = dr_data$d_rate[match(orf, dr_data$orf)],
hlife = log(2)/dr)
par(mfrow = c(2,2))
#Convert frequency of motif into a >= limit
plot_ATATTC <- ref_motifs_rates %>% mutate(ATATTC = replace(ATATTC, ATATTC >= 2, 2)) %>%
ggplot(., aes(x = ATATTC, y = hlife)) +
geom_boxplot(aes(group = ATATTC)) +
scale_x_continuous(breaks = c(0,1,2), labels = c("0", "1", ">=2")) +
scale_y_continuous(trans = "log10", breaks = c(1,5,10,20,40,150))
plot_TGCAT <- ref_motifs_rates %>% mutate(TGCAT = replace(TGCAT, TGCAT >= 3, 3)) %>%
ggplot(data = .,
aes(x = TGCAT, y = hlife)) +
geom_boxplot(aes(group = TGCAT)) +
scale_x_continuous(breaks = c(0,1,2,3), labels = c("0", "1", "2", ">=3"))+
scale_y_continuous(trans = "log10", breaks = c(1,5,10,20,40,150))
plot_TGTAAATA <- ref_motifs_rates %>% mutate(TGTAAATA = replace(TGTAAATA, TGTAAATA >= 1, 1)) %>%
ggplot(data = .,
aes(x = TGTAAATA, y = hlife)) +
geom_boxplot(aes(group = TGTAAATA)) +
scale_x_continuous(breaks = c(0,1), labels = c("0", ">=1"))+
scale_y_continuous(trans = "log10", breaks = c(1,5,10,20,40,150))
plot_TTTTTTA <- ref_motifs_rates %>% mutate(TTTTTTA = replace(TTTTTTA, TTTTTTA >= 2, 2)) %>%
ggplot(data = .,
aes(x = TTTTTTA, y = hlife)) +
geom_boxplot(aes(group = TTTTTTA)) +
scale_x_continuous(breaks = c(0,1,2), labels = c("0", "1", ">=2"))+
scale_y_continuous(trans = "log10", breaks = c(1,5,10,20,40,150))
gridExtra::grid.arrange(plot_ATATTC, plot_TGCAT, plot_TGTAAATA, plot_TTTTTTA, ncol=4)
motifs = c("TGTAAATA", "TGCAT", "TTTTTTA", "ATATTC")
model_data <- ref_motifs_rates %>%
#remove rows with NAs
filter(!is.na(hlife))%>%
#convert motif frequencies to presence and then to factor
mutate_at(motifs, funs(replace(., .>= 1, 1)))%>%
mutate_at(motifs, funs(factor(.) ))%>%
#add a column with log transformed hlife
mutate(log2_hlife = log2(hlife))
#to create separate linear model for each motif
each_model <- model_data %>%
gather("motif", "presence", ATATTC, TGTAAATA, TGCAT, TTTTTTA)%>%
group_by(motif)%>%
#create an lm for each motif - will be stored as a tibble
do(each_lm = lm(log2_hlife ~ presence, data = .))%>%
ungroup()
#to create a multiple linear model
all_lm <- lm(data =model_data, log2_hlife ~ ATATTC + TGTAAATA + TGCAT + TTTTTTA)
#use multiple LM to compute predicted hlife
#NOTE: exp2 for anti log of log2(hlife)
model_data_pred <- add_column(model_data,
pred_hlife = 2 ^ predict.lm(all_lm, model_data))
mean_hlife <- mean(model_data_pred$hlife)
model_data_pred %>% ggplot(data = ., aes(x = pred_hlife, y = hlife)) +
geom_point() +
geom_smooth() +
scale_y_continuous(trans = "log10") + scale_x_continuous(trans = "log10") + labs(y = "Half Life", x = "Predicted Half Life") + geom_hline(aes(yintercept = mean(hlife)), col = "red") + geom_text(aes(x = 8, y = mean_hlife, label = paste("mean = ", round(mean_hlife, digits = 4))), vjust = -10, col = "red")
model_data_groups <- model_data
#Create Randomly Sampled  Groups 1-10
model_data_groups$groupID <- sample(1:10, size = nrow(model_data_groups), replace = TRUE)
#initialize a blank list
list10 <- vector(mode = "list", length = 10)
#initialize a tibble for storing lms and coefficients
group_lms <- tibble(group_excl = 1:10, lm = list10, coeffs = list10)
##Create Cross Validated Linear Models
par(mfrow = c(2,5))
for(i in 1:10){
group_lms[[2]][[i]] <- model_data_groups %>%
#Exclude group i from data and create lm
filter(groupID != i)%>%
lm(log2_hlife ~ ATATTC + TGTAAATA + TGCAT + TTTTTTA, data = .)
#calculate and store coeffs of each lm in coeff column
group_lms[[3]][[i]] <- summary(group_lms[[2]][[i]])$coefficient
plot(group_lms$lm[[i]], which = 2, col= 2, main = paste("Excl. Group", i,  collapse = ""))
}
# ^: END OF FOR LOOP ^
#print all coeffs
group_lms$coeffs
?lm
?summary
?lm
view(group_lms$lm[[1]])
?plot
plot(group_lms$lm[[i]])
plot(group_lms$lm[[i]],which = 2)
plot(group_lms$lm[[i]],col = 2)
